// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package CrashReportFlatbuffers

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type AppLoadLogV4 struct {
	_tab flatbuffers.Table
}

func GetRootAsAppLoadLogV4(buf []byte, offset flatbuffers.UOffsetT) *AppLoadLogV4 {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AppLoadLogV4{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *AppLoadLogV4) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AppLoadLogV4) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *AppLoadLogV4) Model() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AppLoadLogV4) Os() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AppLoadLogV4) OsVersion() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AppLoadLogV4) CrashSDKVersion() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AppLoadLogV4) AppVersion() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AppLoadLogV4) PackageName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AppLoadLogV4) UserKey() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AppLoadLogV4) DeviceId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AppLoadLogV4) GameCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AppLoadLogV4) Geo() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AppLoadLogV4) City() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AppLoadLogV4) ReportDatetime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AppLoadLogV4) MutateReportDatetime(n int64) bool {
	return rcv._tab.MutateInt64Slot(26, n)
}

func (rcv *AppLoadLogV4) MemoryWarning() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AppLoadLogV4) Carrier() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AppLoadLogV4) SessionKey() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AppLoadLogV4) Emulator() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *AppLoadLogV4) MutateEmulator(n bool) bool {
	return rcv._tab.MutateBoolSlot(34, n)
}

func (rcv *AppLoadLogV4) NetworkKind() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AppLoadLogV4) VendorUserKey() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AppLoadLogV4) VendorDeviceId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AppLoadLogV4) BuildCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AppLoadLogV4) MarketName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func AppLoadLogV4Start(builder *flatbuffers.Builder) {
	builder.StartObject(21)
}
func AppLoadLogV4AddModel(builder *flatbuffers.Builder, model flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(model), 0)
}
func AppLoadLogV4AddOs(builder *flatbuffers.Builder, os flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(os), 0)
}
func AppLoadLogV4AddOsVersion(builder *flatbuffers.Builder, osVersion flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(osVersion), 0)
}
func AppLoadLogV4AddCrashSDKVersion(builder *flatbuffers.Builder, crashSDKVersion flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(crashSDKVersion), 0)
}
func AppLoadLogV4AddAppVersion(builder *flatbuffers.Builder, appVersion flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(appVersion), 0)
}
func AppLoadLogV4AddPackageName(builder *flatbuffers.Builder, packageName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(packageName), 0)
}
func AppLoadLogV4AddUserKey(builder *flatbuffers.Builder, userKey flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(userKey), 0)
}
func AppLoadLogV4AddDeviceId(builder *flatbuffers.Builder, deviceId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(deviceId), 0)
}
func AppLoadLogV4AddGameCode(builder *flatbuffers.Builder, gameCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(gameCode), 0)
}
func AppLoadLogV4AddGeo(builder *flatbuffers.Builder, geo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(geo), 0)
}
func AppLoadLogV4AddCity(builder *flatbuffers.Builder, city flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(city), 0)
}
func AppLoadLogV4AddReportDatetime(builder *flatbuffers.Builder, reportDatetime int64) {
	builder.PrependInt64Slot(11, reportDatetime, 0)
}
func AppLoadLogV4AddMemoryWarning(builder *flatbuffers.Builder, memoryWarning flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(memoryWarning), 0)
}
func AppLoadLogV4AddCarrier(builder *flatbuffers.Builder, carrier flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(carrier), 0)
}
func AppLoadLogV4AddSessionKey(builder *flatbuffers.Builder, sessionKey flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(sessionKey), 0)
}
func AppLoadLogV4AddEmulator(builder *flatbuffers.Builder, emulator bool) {
	builder.PrependBoolSlot(15, emulator, false)
}
func AppLoadLogV4AddNetworkKind(builder *flatbuffers.Builder, networkKind flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(networkKind), 0)
}
func AppLoadLogV4AddVendorUserKey(builder *flatbuffers.Builder, vendorUserKey flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(vendorUserKey), 0)
}
func AppLoadLogV4AddVendorDeviceId(builder *flatbuffers.Builder, vendorDeviceId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(vendorDeviceId), 0)
}
func AppLoadLogV4AddBuildCode(builder *flatbuffers.Builder, buildCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(buildCode), 0)
}
func AppLoadLogV4AddMarketName(builder *flatbuffers.Builder, marketName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(marketName), 0)
}
func AppLoadLogV4End(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
